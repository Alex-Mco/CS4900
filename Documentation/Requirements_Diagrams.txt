Functional Requirements: 
1. Search for characters by name, abilities, or teams.
2. View character profiles with images, bios, and timelines.
3. Filter characters by attributes (e.g., heroes, villains, anti-heroes).
4. Search comics by title, series, or release date.
5. Save comics to "favorites" or "to-read" lists.
6. Provide personalized comic recommendations.
7. User authentication using OAuth.
8. Dashboard summarizing user preferences and saved items.
Non-Functional Requirements: 
1. Performance: Fast response times for search queries (<2 seconds).
2. Scalability: Handle a growing database of characters and comics.
3. Usability: Intuitive UI with responsive design.
4. Security: Secure user authentication and data storage.

Low-fidelity, Non-interactive, Mobile-First, Responsive GUI design/mockup (using figma): 
        Figma Link: https://www.figma.com/design/A85U9xDvjrntzoF4rn1IvB/Capstone?node-id=0-1&t=0bT4mYa8d1hwhFPY-1 

Database Diagrams: 
one collection for comics: {
  "comics": [
    {
        title: {
            type: String,
            required: true,
        },
        issueNumber: {
            type: Number,
        },
        creators:[{
            role: {
              type: String,
            },
            name: {
              type: String,
            }
        }],
        description: {
            type: String,
        },
        thumbnail: {
            path: {
              type: String,
            },
            extension: {
              type: String,
            }
        },
        series:{
            type: String,
        },
        variant:{
            type: Boolean,
        },
        pgCount:{
            type: Number, 
        }
    }
  ]
}
one collection for collections:{
"collection": [
    {
        collectionName: {
            type: String,
            required: true,
        },
        comics: [{
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Comic'
        }],
    }
  ]
}
A different collection for users
{
  googleId:{
    type: String, 
    required: true, 
    unique: true,
  },
  name: {
    type: String,
    required: true,
  },
  username: {
    type: String,
    required:true,
    unique: true,
  },
  password: {
    type: String,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  profilePic:{
    type: String,
    required: false,
  },
  collections: [collectionSchema],
}

Json web service input and output for each RESTful endpoint: 
1. GET /characters?name=Iron+Man
Input:
json
{
  "name": "Iron Man"
}
Output:
json
{
  "id": "1009368",
  "name": "Iron Man",
  "description": "A wealthy industrialist and genius inventor...",
  "image": "http://example.com/ironman.jpg"
}
2. POST /save-comic
Input:
json
{
  "userId": "123",
  "comicId": "001"
}
Output:
json
{
  "message": "Comic saved successfully."
}

Architectural Stack:
Frontend: React Vite
Backend: Node.js, Express.js
Database: MongoDB for user, comic, and character data
API Integration: Marvel API (free to use with an account)
Authentication: OAuth 2.0 with google for user authentication.
Hosting: AWS frontend and backend.
Testing: Jest for backend Vitest for frontend
